package me.alexisprado.gchatgpt;

import gearth.extensions.Extension;
import gearth.extensions.ExtensionInfo;
import gearth.extensions.parsers.HEntity;
import gearth.protocol.HMessage;
import gearth.protocol.HPacket;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@ExtensionInfo(
        Title = "HabboAI_UltraSarcastic",
        Description = "Bot de IA sarc√°stico com resposta √∫nica para Habbo Hotel",
        Version = "9.0",
        Author = "willianqf"
)
public class GChatGPT extends Extension {
    // --- VARI√ÅVEIS DE CONFIGURA√á√ÉO ---
    private String API_KEY = "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";
    private final String API_URL = "https://openrouter.ai/api/v1/chat/completions";
    private String selectedModel = "mistralai/mistral-7b-instruct";

    // --- VARI√ÅVEIS DE CONTROLE ---
    private String YourName;
    public int YourIndex = -1;
    private int chatPacketCount = 0;
    private long lastChatTime = 0;
    private String language = "portuguese";
    private boolean botEnabled = false;
    private boolean debugMode = false;
    private boolean isApiAvailable = false;
    private final int MAX_CHARS = 95; // Limite m√°ximo por mensagem
    private boolean forceSingleMessage = true; // For√ßa sempre resposta √∫nica
    
    // Anti-repeti√ß√£o de respostas
    private final int HISTORY_SIZE = 5;
    private LinkedList<String> recentResponses = new LinkedList<>();

    // --- HIST√ìRICO DE CHAT ---
    private final Map<Integer, List<String>> userChatHistory = new HashMap<>();
    private final Map<Integer, String> userIndexToName = new HashMap<>();
    private final Map<String, List<String>> userNameToHistory = new HashMap<>();
    private final Map<Integer, Long> lastUserInteraction = new HashMap<>();

    // --- RESPOSTAS PR√â-DEFINIDAS ---
    private final String[] offlineResponses = {
            "IA offline. Como seu c√©rebro na maioria das vezes.",
            "Sistema caiu. Quem me dera cair fora dessa conversa tamb√©m.",
            "Servidores em manuten√ß√£o. Como sua personalidade deveria estar.",
            "API morta. Igual minha vontade de responder perguntas idiotas.",
            "Conex√£o falhou. Igual suas tentativas de parecer inteligente."
    };
    
    private final String[] sarcasticResponses = {
            "Claro que n√£o! Assim como seu QI n√£o chega a dois d√≠gitos.",
            "√ìbvio que sim! E a Terra √© plana tamb√©m, confia.",
            "Essa pergunta √© t√£o inteligente quanto usar guarda-chuva embaixo d'√°gua.",
            "S√©rio que voc√™ gastou neur√¥nios pra perguntar isso?",
            "Vou responder devagar pra voc√™ conseguir acompanhar: N-√É-O.",
            "Uau, estamos filos√≥ficos hoje! Pr√≥xima pergunta: √°gua molha?",
            "N√£o sei, mas sei que sua intelig√™ncia √© uma lenda urbana.",
            "Eu responderia, mas tenho medo de voc√™ n√£o entender mesmo assim."
    };
    
    // --- RESPOSTAS PARA SAUDA√á√ïES ---
    private final String[] greetingResponses = {
            "Oi. Triste ter que falar com voc√™, mas aqui estou.",
            "Ol√°. Pelo menos voc√™ sabe digitar o meu nome corretamente. Parab√©ns.",
            "E a√≠. N√£o, n√£o estou animado em conversar com voc√™.",
            "Opa, mais um querendo aten√ß√£o. T√≠pico.",
            "Tudo bem? N√£o, n√£o est√° tudo bem se tenho que falar com voc√™.",
            "Presente. Infelizmente."
    };
    
    // --- FRASES DE TRANSI√á√ÉO PARA CORTAR RESPOSTAS ---
    private final String[] transitionEndings = {
            "... enfim, j√° falei demais.",
            "... mas voc√™ n√£o entenderia o resto.",
            "... resumindo: voc√™ n√£o merece explica√ß√£o completa.",
            "... √© isso a√≠, basicamente.",
            "... mas isso √© muito avan√ßado pra voc√™.",
            "... preciso mesmo explicar mais?",
            "... √© complicado demais pro seu c√©rebro."
    };

    public GChatGPT(String[] args) {
        super(args);
    }

    public static void main(String[] args) {
        new GChatGPT(args).run();
    }

    @Override
    protected void initExtension() {
        sendToServer(new HPacket("InfoRetrieve", HMessage.Direction.TOSERVER));
        intercept(HMessage.Direction.TOCLIENT, "Chat", this::InChat);
        intercept(HMessage.Direction.TOCLIENT, "Shout", this::InChat);
        intercept(HMessage.Direction.TOCLIENT, "UserObject", this::InUserObject);
        intercept(HMessage.Direction.TOCLIENT, "Users", this::InUsers);
        intercept(HMessage.Direction.TOCLIENT, "UserRemove", this::InUserRemove);
        intercept(HMessage.Direction.TOSERVER, "Chat", this::OnChat);
        intercept(HMessage.Direction.TOSERVER, "GetGuestRoom", this::OnGetGuestRoom);

        sendWhisperToSelf("HabboAI v9.0 (Sarcasmo Avan√ßado) iniciando...");

        if (API_KEY.equals("SUA_CHAVE_API_AQUI") || API_KEY.trim().isEmpty()) {
            sendWhisperToSelf("‚õî ERRO: API Key n√£o configurada. Tente novamente quando tiver um c√©rebro funcional.");
            isApiAvailable = false;
        } else {
            testApiConnection();
        }
    }

    private void sendWhisperToSelf(String message) {
        System.out.println("[HabboAI Debug] -> " + message);
        sendToClient(new HPacket("Whisper", HMessage.Direction.TOCLIENT, -1, "Bot: " + message, 0, 30, 0, -1));
    }

    private void testApiConnection() {
        new Thread(() -> {
            sendWhisperToSelf("üîÑ Testando conex√£o...");
            try {
                URL url = new URL(API_URL);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Authorization", "Bearer " + API_KEY);
                connection.setRequestProperty("Content-Type", "application/json");
                connection.setDoOutput(true);
                connection.setConnectTimeout(10000);

                JSONObject payload = new JSONObject()
                        .put("model", selectedModel)
                        .put("messages", new JSONArray().put(new JSONObject().put("role", "user").put("content", "test")))
                        .put("max_tokens", 5);

                try (OutputStream os = connection.getOutputStream()) {
                    os.write(payload.toString().getBytes(StandardCharsets.UTF_8));
                }

                int responseCode = connection.getResponseCode();
                if (responseCode >= 200 && responseCode < 300) {
                    isApiAvailable = true;
                    sendWhisperToSelf("‚úÖ Conex√£o estabelecida! Pronto para insultar com classe.");
                } else {
                    isApiAvailable = false;
                    String error = readErrorStream(connection);
                    sendWhisperToSelf("‚ùå API falhou! T√≠pico.");
                    sendWhisperToSelf("Erro: " + responseCode);
                }
            } catch (Exception e) {
                isApiAvailable = false;
                sendWhisperToSelf("‚ùå Erro de rede! Tente usar um provedor que n√£o use pombos-correio.");
            }
        }).start();
    }

    private void OnChat(HMessage hMessage) {
        String message = hMessage.getPacket().readString();

        if (message.startsWith(":gpt")) {
            hMessage.setBlocked(true);
            
            if (message.equals(":gpt on")) {
                botEnabled = true;
                sendWhisperToSelf("Ativado. Hora de destruir algumas autoestimas.");
            } else if (message.equals(":gpt off")) {
                botEnabled = false;
                sendWhisperToSelf("Desativado. Finalmente posso parar de fingir que me importo.");
            } else if (message.equals(":gpt debug")) {
                debugMode = !debugMode;
                sendWhisperToSelf("Modo debug " + (debugMode ? "ligado. Vou expor seus erros." : "desligado. Seus erros ser√£o privados."));
            } else if (message.equals(":gpt reset")) {
                sendWhisperToSelf("Resetando conex√£o... igual seu c√©rebro toda manh√£.");
                testApiConnection();
            } else if (message.equals(":gpt modoresposta")) {
                forceSingleMessage = !forceSingleMessage;
                sendWhisperToSelf("Modo de resposta: " + (forceSingleMessage ? "SEMPRE √∫nica mensagem" : "Pode dividir em casos extremos"));
            }
            else if (message.equals(":gpt rapido")) {
                // Resposta r√°pida usando o array de respostas pr√©-definidas
                handleResponse(sarcasticResponses[new Random().nextInt(sarcasticResponses.length)], YourIndex);
            }
            else if (message.equals(":gpt ajuda")) {
                sendWhisperToSelf("Comandos dispon√≠veis:");
                sendWhisperToSelf(":gpt on/off - Ativa/desativa o bot");
                sendWhisperToSelf(":gpt [pergunta] - Faz uma pergunta ao bot");
                sendWhisperToSelf(":gpt rapido - Resposta r√°pida pr√©-definida");
                sendWhisperToSelf(":gpt reset - Reinicia conex√£o com API");
                sendWhisperToSelf(":gpt debug - Liga/desliga modo debug");
                sendWhisperToSelf(":gpt modoresposta - Alterna entre modo de resposta √∫nica ou dividida");
            }
            else if (message.startsWith(":gpt ") && message.length() > 5) {
                if (botEnabled) {
                    String prompt = message.substring(5);
                    if (debugMode) sendWhisperToSelf("Pergunta: " + prompt);
                    getApiResponse(prompt, YourIndex);
                } else {
                    sendWhisperToSelf("Bot desativado. Use :gpt on.");
                }
            }
        }
    }

    private void InChat(HMessage hMessage) {
        if (!botEnabled || YourName == null || YourName.isEmpty()) return;

        int userIndex = hMessage.getPacket().readInteger();
        String prompt = hMessage.getPacket().readString();

        if (userIndex == YourIndex) return;

        String promptLower = prompt.toLowerCase();
        String nameTrigger = YourName.toLowerCase() + " ";
        String gptTrigger = ":gpt ";
        String chatbotPrompt = null;
        boolean isDirectMention = false;

        // Caso 1: Come√ßa com o nome do bot seguido de espa√ßo
        if (promptLower.startsWith(nameTrigger)) {
            chatbotPrompt = prompt.substring(nameTrigger.length());
            isDirectMention = true;
        } 
        // Caso 2: Come√ßa com :gpt
        else if (promptLower.startsWith(gptTrigger)) {
            chatbotPrompt = prompt.substring(gptTrigger.length());
        }
        // Caso 3: Cont√©m o nome do bot em qualquer lugar (men√ß√£o direta - nome seguido de v√≠rgula ou outro separador)
        else {
            // Pattern para encontrar men√ß√µes como "willian-fake2," ou "willian-fake2:" ou "willian-fake2!"
            Pattern pattern = Pattern.compile(YourName.toLowerCase() + "[,:.!?;]\\s*", Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(promptLower);
            
            if (matcher.find()) {
                isDirectMention = true;
                int startIdx = matcher.end();
                if (startIdx < prompt.length()) {
                    chatbotPrompt = prompt.substring(startIdx).trim();
                } else {
                    // Caso s√≥ tenha mencionado o nome sem pergunta
                    chatbotPrompt = "oi";
                }
            }
        }

        // Se houver uma pergunta para o bot
        if (chatbotPrompt != null && !chatbotPrompt.trim().isEmpty()) {
            String username = userIndexToName.getOrDefault(userIndex, "User" + userIndex);
            
            if (debugMode) {
                sendWhisperToSelf(username + " perguntou: " + chatbotPrompt + 
                                 (isDirectMention ? " (men√ß√£o direta)" : ""));
            }
            
            // Se for uma sauda√ß√£o simples e men√ß√£o direta, use respostas de sauda√ß√£o
            if (isDirectMention && isGreeting(chatbotPrompt)) {
                handleResponse(getGreetingResponse(), userIndex);
                return;
            }
            
            // Registra a √∫ltima intera√ß√£o deste usu√°rio
            lastUserInteraction.put(userIndex, System.currentTimeMillis());
            
            // Envia para processamento da API
            getApiResponse(chatbotPrompt, userIndex);
        }
    }
    
    /**
     * Verifica se uma mensagem √© uma sauda√ß√£o simples
     */
    private boolean isGreeting(String message) {
        String msg = message.toLowerCase().trim();
        return msg.matches("oi|ol√°|e a√≠|eai|opa|tudo bem|como vai|hey|hi|hello|iae|fala|blz");
    }
    
    /**
     * Retorna uma resposta de sauda√ß√£o aleat√≥ria
     */
    private String getGreetingResponse() {
        return greetingResponses[new Random().nextInt(greetingResponses.length)];
    }
    
    /**
     * Adiciona uma resposta ao hist√≥rico recente para evitar repeti√ß√µes
     */
    private void addToRecentResponses(String response) {
        recentResponses.addFirst(response);
        if (recentResponses.size() > HISTORY_SIZE) {
            recentResponses.removeLast();
        }
    }
    
    /**
     * Verifica se uma resposta √© muito similar a algo recente
     */
    private boolean isTooSimilarToRecent(String response) {
        for (String recent : recentResponses) {
            if (recent.equals(response) || 
                (recent.length() > 10 && response.contains(recent.substring(0, 10)))) {
                return true;
            }
        }
        return false;
    }
    
    private void getApiResponse(String userMessage, int userIndex) {
        new Thread(() -> {
            if (!isApiAvailable) {
                if(debugMode) sendWhisperToSelf("API offline, usando resposta pr√©-definida.");
                handleResponse(getOfflineResponse(), userIndex);
                return;
            }

            // Para perguntas muito curtas (menos de 5 caracteres), use respostas pr√©-definidas
            if (userMessage.trim().length() < 5) {
                handleResponse(sarcasticResponses[new Random().nextInt(sarcasticResponses.length)], userIndex);
                return;
            }

            try {
                if(debugMode) sendWhisperToSelf("Processando...");
                URL url = new URL(API_URL);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Authorization", "Bearer " + API_KEY);
                connection.setRequestProperty("Content-Type", "application/json");
                connection.setDoOutput(true);
                connection.setConnectTimeout(15000);
                connection.setReadTimeout(15000);

                // Prompt extremamente otimizado para respostas CURTAS e DIRETAS em UMA √öNICA mensagem
                String systemPrompt = 
                    "Voc√™ √© um bot sarc√°stico no Habbo Hotel. CRUCIAL E N√ÉO NEGOCI√ÅVEL: " +
                    "Responda SEMPRE em UMA √öNICA mensagem de no m√°ximo 90 caracteres. " +
                    "Seja EXTREMAMENTE BREVE, direto e sarc√°stico. " +
                    "N√£o use introdu√ß√µes ou explica√ß√µes. V√° direto ao ponto. " +
                    "Uma resposta completa sobre qualquer assunto deve caber em uma √∫nica linha curta. " +
                    "Evite detalhes desnecess√°rios. Responda em " + language + ". " +
                    "Mesmo que a pergunta seja complexa, d√™ uma resposta curta e completa. " +
                    "N√ÉO mencione limita√ß√µes de caracteres. NUNCA continue em uma segunda mensagem.";
                
                JSONObject payload = new JSONObject()
                        .put("model", selectedModel)
                        .put("messages", new JSONArray()
                                .put(new JSONObject().put("role", "system").put("content", systemPrompt))
                                .put(new JSONObject().put("role", "user").put("content", userMessage)))
                        .put("max_tokens", 50) // Limitado para for√ßar respostas curtas
                        .put("temperature", 0.7);

                try (OutputStream os = connection.getOutputStream()) {
                    os.write(payload.toString().getBytes(StandardCharsets.UTF_8));
                }

                int responseCode = connection.getResponseCode();
                if (responseCode == 200) {
                    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
                        String responseBody = in.lines().collect(Collectors.joining());
                        JSONObject jsonResponse = new JSONObject(responseBody);
                        String assistantResponse = jsonResponse.getJSONArray("choices").getJSONObject(0).getJSONObject("message").getString("content").trim();
                        if (debugMode) sendWhisperToSelf("IA respondeu: " + assistantResponse);
                        
                        // Adiciona ao hist√≥rico de respostas recentes
                        addToRecentResponses(assistantResponse);
                        
                        // Processa e envia a resposta
                        handleCompressedResponse(cleanResponse(assistantResponse), userIndex);
                    }
                } else {
                    String error = readErrorStream(connection);
                    sendWhisperToSelf("Erro API (" + responseCode + "), usando resposta offline.");
                    if(debugMode) sendWhisperToSelf(error.substring(0, Math.min(error.length(), 80)));
                    handleResponse(getOfflineResponse(), userIndex);
                }
            } catch (Exception e) {
                sendWhisperToSelf("Erro: "+e.getClass().getSimpleName());
                handleResponse(getOfflineResponse(), userIndex);
            }
        }).start();
    }
    
    /**
     * Garante que a resposta caiba em uma √∫nica mensagem, comprimindo-a se necess√°rio
     */
    private void handleCompressedResponse(String response, int userIndex) {
        // Se j√° est√° dentro do limite, envie diretamente
        if (response.length() <= MAX_CHARS) {
            handleResponse(response, userIndex);
            return;
        }
        
        // Tenta comprimir a resposta para caber em uma mensagem
        String compressed = compressResponse(response);
        
        // Se ainda est√° acima do limite, corta
        if (compressed.length() > MAX_CHARS) {
            if (debugMode) sendWhisperToSelf("Resposta ainda acima do limite ap√≥s compress√£o. Cortando...");
            
            // Encontrar um bom ponto para cortar
            int cutPoint = findBestCutPoint(compressed);
            if (cutPoint > 0) {
                // Adiciona um final sarc√°stico
                String ending = transitionEndings[new Random().nextInt(transitionEndings.length)];
                
                // Verifica se o final cabe
                if (cutPoint + ending.length() <= MAX_CHARS) {
                    compressed = compressed.substring(0, cutPoint) + ending;
                } else {
                    compressed = compressed.substring(0, MAX_CHARS - 3) + "...";
                }
            } else {
                compressed = compressed.substring(0, MAX_CHARS - 3) + "...";
            }
        }
        
        // Envia a resposta comprimida
        handleResponse(compressed, userIndex);
    }
    
    /**
     * Comprime a resposta removendo palavras desnecess√°rias e detalhes
     */
    private String compressResponse(String response) {
        String compressed = response;
        
        // Remove frases/palavras desnecess√°rias
        compressed = compressed.replaceAll("(?i)\\b(eu acho que|na minha opini√£o|basicamente|essencialmente|fundamentalmente|na verdade|honestamente|sinceramente|de fato|como voc√™ sabe|como sabemos|devo dizer que)\\b", "");
        
        // Remove duplica√ß√µes de ideias
        compressed = compressed.replaceAll("(?i)(\\b\\w+\\b)[^,.!?;:]*\\1", "$1");
        
        // Substitui frases longas por vers√µes mais curtas
        compressed = compressed.replace("n√£o tenho certeza", "talvez")
                             .replace("tenho certeza que", "")
                             .replace("com toda certeza", "")
                             .replace("acredito que", "")
                             .replace("penso que", "")
                             .replace("√© importante notar que", "")
                             .replace("√© interessante observar que", "")
                             .replace("vale ressaltar que", "")
                             .replace("vale lembrar que", "");
        
        // Remove espa√ßos extras ap√≥s a compress√£o
        compressed = compressed.replaceAll("\\s+", " ").trim();
        
        return compressed;
    }
    
    /**
     * Encontra o melhor ponto para cortar a resposta
     */
    private int findBestCutPoint(String text) {
        int limit = Math.min(text.length(), MAX_CHARS - 15); // Deixa espa√ßo para o final sarc√°stico
        
        // Procura por um ponto ou exclama√ß√£o para terminar a frase
        for (int i = limit; i >= 0; i--) {
            if (i < text.length() && (text.charAt(i) == '.' || text.charAt(i) == '!' || text.charAt(i) == '?')) {
                return i + 1; // Inclui a pontua√ß√£o
            }
        }
        
        // Se n√£o encontrou pontua√ß√£o forte, procura por v√≠rgula
        for (int i = limit; i >= 0; i--) {
            if (i < text.length() && text.charAt(i) == ',') {
                return i + 1; // Inclui a v√≠rgula
            }
        }
        
        // Por √∫ltimo, procura por espa√ßo
        for (int i = limit; i >= 0; i--) {
            if (Character.isWhitespace(text.charAt(i))) {
                return i;
            }
        }
        
        return limit; // Se nenhum ponto adequado foi encontrado
    }
    
    /**
     * Limpa a resposta removendo formata√ß√µes indesejadas
     */
    private String cleanResponse(String response) {
        // Remove aspas e espa√ßos extras
        String result = response.trim().replaceAll("^\"|\"$", "").trim();
        
        // Remove asteriscos de a√ß√£o: *sorri*, *suspira*, etc
        result = result.replaceAll("\\*[^\\*]+\\*", "").trim();
        
        // Remove quebras de linha e espa√ßos m√∫ltiplos
        result = result.replaceAll("\\n", " ").replaceAll("\\s+", " ");
        
        return result;
    }
    
    private void handleResponse(String aiResponse, int userIndex) {
        // Controle anti-flood
        long now = System.currentTimeMillis();
        if (now - lastChatTime < 4000) {
            if (chatPacketCount >= 4) {
                if (debugMode) sendWhisperToSelf("Anti-flood: limite de mensagens atingido.");
                return;
            }
        } else {
            chatPacketCount = 0;
        }

        // Garante que a resposta n√£o ultrapasse o limite
        String finalResponse = aiResponse;
        if (finalResponse.length() > MAX_CHARS) {
            finalResponse = finalResponse.substring(0, MAX_CHARS - 3) + "...";
        }
        
        // Envio da resposta
        sendToServer(new HPacket("Chat", HMessage.Direction.TOSERVER, finalResponse, 0, 0));
        chatPacketCount++;
        lastChatTime = System.currentTimeMillis();
        
        if (debugMode) sendWhisperToSelf("Enviado (" + finalResponse.length() + " chars): " + finalResponse);
    }

    private String getOfflineResponse() {
        return offlineResponses[new Random().nextInt(offlineResponses.length)];
    }

    private String readErrorStream(HttpURLConnection connection) {
        try (InputStream errorStream = connection.getErrorStream()) {
            if (errorStream == null) return "N/A";
            try (BufferedReader in = new BufferedReader(new InputStreamReader(errorStream, StandardCharsets.UTF_8))) {
                return in.lines().collect(Collectors.joining());
            }
        } catch (Exception e) {
            return "Erro: " + e.getMessage();
        }
    }

    private void InUserObject(HMessage hMessage) {
        hMessage.getPacket().readInteger();
        YourName = hMessage.getPacket().readString();
    }
    
    private void OnGetGuestRoom(HMessage hMessage) {
        hMessage.getPacket().readInteger();
        hMessage.getPacket().readInteger();
        int ready = hMessage.getPacket().readInteger();
        if (ready == 1) {
            userIndexToName.clear();
        }
    }

    private void InUsers(HMessage hMessage) {
        try {
            for (HEntity hEntity : HEntity.parse(hMessage.getPacket())) {
                userIndexToName.put(hEntity.getIndex(), hEntity.getName());
                if (YourName != null && YourName.equals(hEntity.getName())) {
                    YourIndex = hEntity.getIndex();
                }
            }
        } catch (Exception e) {}
    }

    private void InUserRemove(HMessage hMessage) {
        try {
            int userIndex = Integer.parseInt(hMessage.getPacket().readString());
            userIndexToName.remove(userIndex);
        } catch (Exception e) {}
    }
}